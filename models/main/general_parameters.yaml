# general_parameters_with description file holds definitions, it's NOT
# an independent schema

# Intentional redundancy. Don't fix unless you really know what you're doing!
general_parameters:
    description         : str(equals='The general information of the
                                      measurements', required=False)
    value               : include('General_parameters')
---
General_parameters:
    schema_version:
        description     : str(equals='The schema version used to annotate the
                                      general parameters', required=False)
        value           : keyword(equals='0.9.17')

    record_information:
        description     : str(equals='Information about the record itself,
                                      including whether this particular record
                                      is associated with other records',
                              required=False)
        value           : include('Record_information')

    depositors:
        description     : str(equals='Information about the depositors (authors)
                                      of this record', required=False)
        value           : include('Depositors')

    associated_publication:
        description     : str(equals='If the data in this record is described in
                                      published literature (article, journal, thesis),
                                      information about the literature 
                                      can be specified here',
                              required=False)
        value           : include('Publication', required=False)

    funding_reference:
        description     : str(equals='List of information about the grants that
                                      supported generation of the raw data
                                      annotated by this record. Note that this
                                      information is based on OpenAire Projects',
                                      required=False)
        default_search  : True
        value           : list(vocabulary(vocabulary='grants',
                                          fields='[id,title,props.funder_name]'),
                                          required=False)

    technique:
        description     : str(equals='The type of experimental technique used
                                      for collecting the raw data annotated by
                                      this record', required=False)
        value           : include('SUPPORTED_TECHNIQUES')

    collection_start_time:
        description     : str(equals='The date when collection of the raw data
                                      began', required=False)
        value           : day()

    instrument:
        description     : str(equals='Information about the instrument being
                                      used to collect (measure) the raw data
                                      annotated by this record', required=False)
        value           : include('Instrument')

    chemical_information:
        description     : str(equals='Information about entities of interest
                                      that were being measured (e.g. Lysozyme)
                                      or used to alter the behaviour of the
                                      measured species (e.g. Peptidoglycan), and
                                      the chemical environments that was used in
                                      the measurement (e.g. buffers, cleaning
                                      solutions)', required=False)
        value           : include('Chemical_information')

    results:
        description     : str(equals='List of the results (parameter) that were
                                      derived by analyzing the raw data,
                                      and which steps were taken to obtain
                                      them', required=False)
        default_search  : True
        value           : list(nested_include('Result'),
                               required=False)
    raw_measurement_files:
        description     : str(equals='List of file(s) containing the raw
                                      measurements', required=False)
        value           : list(url(), required=False)
        ui_file_context : str(equals='raw measurement data')

---
# Record metadata

Record_information:
    title:
        description : str(equals='Short descriptive title of the record',
                          required=False)
        default_search  : True
        value       : str()

    access_rights:
        description : str(equals='The access rights to the uploaded files.
                                  There are three options, 1) "open access"
                                  where the files are accessible immediately
                                  when the deposition is published, 2)
                                  "embargoed access" where the files will
                                  only become available after a specified
                                  date, 3) "restricted access" where
                                  depositors are of the record are the only
                                  ones who has access', required=False)
        value       : enum('open access', 'embargoed access',
                           'restricted access')

    metadata_access_rights:
        description : str(equals='The access rights to the metadata. Minimal
                                  metadata that includes title and
                                  depositors is accessible regardless of
                                  which type is chosen as it is required to
                                  obtain a DOI. There are three options, 1)
                                  "open access" where the complete metadata
                                  are accessible immediately when the
                                  deposition is published, 2)
                                  "embargoed access" where the files will
                                  only become available after a specified
                                  date, 3) "restricted access" where
                                  depositors are of the record are the only
                                  ones who has access', required=False)
        value       : enum('open access', 'embargoed access',
                           'restricted access')

    publisher:
        description : str(equals='When made available MBDB is to be
                                  considered the publisher, however, the
                                  depositors are still the owners',
                                  required=False)
        value       : keyword(equals='MBDB')

    resource_type_general:
        description : str(equals='All records are considered to be
                                  datasets', required=False)
        value       : keyword(equals='Dataset')

    resource_type:
        description : str(equals='DataCite item which shows type of dataset the
                                  record is and corresponds directly to which
                                  kind of technique was used (MST/BLI/SPR)',
                          required=False)
        value       : keyword()

    identifier:
        description : str(equals='The (external) identifier of the record
                                  which is a DOI generated by Datacite. This
                                  will automatically be generated when the
                                  record is published', required=False)
        value       : database_id(required=False)

    subject_category:
        description : str(equals='DataCite subject category the record data
                                  belongs to default is Biophysics',
                          required=False)
        value       : keyword(equals='Biophysics')

    deposition_date:
        description : str(equals='The date when the data was deposited;
                                  automatically generated', required=False)
        value       : day()

    date_available:
        description : str(equals='The date when the data was/will be made
                                  publicly available. Will be automatically
                                  generated', required=False)
        value       : day(required=False)

---
# Instrument information

Instrument:
    manufacturer:
        description : str(equals='Name of the manufacturer of the instrument
                                  used for raw data collection',
                          required=False)
        default_search : True
        value       : include('COMPANIES')

    name:
        description : str(equals='The name of the instrument as provided by the
                                  manufacturer', required=False)
        value       : str()

---
# Entities and references to them

Entity_base:
    id:
        description     : str(equals='Unique ID for the entity to be used as a
                                      link', required=False)
        value           : link_target(name="entity")

    name:
        description     : str(equals='Short descriptive name (id) of the entity;
                                      must be unique within a record (e.g.
                                      Lysozyme, Serum from Patient 1). This name
                                      is referenced in the measurement
                                      description to identify the entities
                                      present in measured sample',
                              required=False)
        default_search  : True
        value           : str()

    type:
        description     : str(equals='The type of the entity, where the options
                                      are (biological) Polymer, Chemical,
                                      Molecular assembly (also includes all 
                                      proteins composed of more than one 
                                      polypeptide chain) or Complex substance.
                                      Chemical polymers such as PEG 5000 should
                                      be described as being a Chemical. Complex
                                      substance refers to substances which are
                                      not exactly specified by their exact
                                      chemical composition by the time
                                      measurement were performed, but e.g.
                                      blood, serum, plant extract',
                          required=False)
        default_search  : True
        value           : enum('Polymer',
                               'Chemical',
                               'Molecular assembly',
                               'Complex substance of biological origin',
                               'Complex substance of environmental origin',
                               'Complex substance of chemical origin',
                               'Complex substance of industrial production origin')

Entity:
    description     : str(equals='Details of the entity including identifiers
                                  and protocols used to obtain the entity. Which
                                  information is required, varies depending the
                                  type of entity', required=False)
    value           : choose(include('Entity_base'),
                             Polymer=include('Polymer'),
                             Chemical=include('Chemical'),
                             Molecular_assembly=include('Molecular_assembly'),
                             Complex_substance_of_biological_origin=include('Complex_substance_of_biological_origin'),
                             Complex_substance_of_environmental_origin=include('Complex_substance_of_environmental_origin'),
                             Complex_substance_of_chemical_origin=include('Complex_substance_of_chemical_origin'),
                             Complex_substance_of_industrial_production_origin=include('Complex_substance_of_industrial_production_origin')
                             )
Entity_constituent:
    entity:
        description     : str(equals='Name (id) of the entity (from the
                                      entities of interest defined in the
                                      general parameters)', required=False)
        value           : link(target='entity')


    concentration:
        description     : str(equals='Concentration of the entity',
                              required=False)
        value           : include('Concentration')

---
# Defined assemblies description

Molecular_assembly:
    external_databases:
        description     : str(equals='List of identifiers to records in external
                                      databases containing information about the
                                      molecular assembly as a whole can be
                                      specified here (e.g. PDB:1YQ2 );
                                      information about the individual
                                      components should be specified in the
                                      details of the individual components',
                              required=False)
        default_search  : True
        value           : list(database_id(), required=False)

    components:
        description     : str(equals='Description of the individual components
                                      (e.g. polypeptide, heme, lipids, metal
                                      ions etc.) the molecular assembly is
                                      composed of (e.g. Hemoglobin alpha) and
                                      how many copies of each component
                                      were present', required=False)
        value           : list(nested_include('Assembly_component'), min=1)

    molecular_weight:
        description     : str(equals='The molecular weight of the molecular
                                      assembly', required=False)
        value           : include('Molecular_weight')

    chemical_modifications:
        description     : str(equals='List describing deliberate modifications
                                      made to the molecular assembly
                                      through chemical, biochemical, or physical
                                      means', required=False)
        value           : list(nested_include('Modification'), required=False)

    additional_specifications:
        description     : str(equals='Additional information about the
                                      macromolecular assembly can be specified
                                      here', required=False)
        value           : list(str(), required=False)

Assembly_component_base:
    name:
        description     : str(equals='Short descriptive name (id) given to the
                                      assembly component. The name must be
                                      unique within a record',
                              required=False)
        default_search  : True
        value           : str()

    type:
        description     : str(equals='The type of component, options are
                                      (biological) Polymer and Chemical',
                              required=False)
        value           : enum('Polymer',
                               'Chemical')

    copy_number:
        description     : str(equals='Number of molecules of the component
                                      within the assembly, -1 if unknown',
                              required=False)
        value           : num(min=-1)

Assembly_component:
    description     : str(equals='Details about the assembly component',
                                      required=False)
    value           : choose(include('Assembly_component_base'),
                             Polymer=include('Polymer'),
                             Chemical=include('Chemical'))

---
# Polymer descriptions

Polymer:
    polymer_type:
        description     : str(equals='The type of polymer (e.g.
                                      polypeptide(L))')
        default_search  : True
        value           : enum('cyclic-pseudo-peptide',
                               'peptide nucleic acid',
                               'polydeoxyribonucleotide',
                               'polydeoxyribonucleotide/polyribonucleotide
                                hybrid',
                               'polypeptide(D)',
                               'polypeptide(L)',
                               'polyribonucleotide')
# make annoying popup if users do not provide a sequence
    sequence:
        description     : str(equals='Primary sequence of the polymer, using
                                      single letter codes (e.g. SAGRELLE, AGTTA).
                                      In case of non-natural amino acids or 
                                      nucleotides, please place the monomer in 
                                      brackets', required=False)
        default_search  : True
        value           : str(required=False)

    molecular_weight:
        description     : str(equals='The molecular weight of the polymer',
                              required=False)
        value           : include('Molecular_weight')

    external_databases:
        description     : str(equals='List of identifiers to records in
                                      external databases containing
                                      information about the polymer can
                                      be specified here (e.g UNIPROT:Q8KRF6)',
                              required=False)
        default_search  : True
        value           : list(database_id(), required=False)

    variant:
        description     : str(equals='Descriptive name indicating differences of
                                      primary sequence of the polymer as
                                      compared to the most common form, or
                                      wildtype, including mutations,
                                      purification tags, etc. (A53T,
                                      C-terminal GFP, N-terminal 6xHis-tag)',
                              required=False)
        default_search  : True
        value           : str(required=False)

    source_organism:
        description     : str(equals='The biological species where the polymer
                                      naturally occurs. Note that this is based
                                      on the NCBI taxonomy', required=False)
        default_search  : True
        value           : vocabulary(vocabulary='organisms',
                                     fields='[id,title,props.rank]',
                                     required=False)

    modifications:
        description     : str(equals='If the polymer contains modifications
                                      such as non-natural aminoacids, post
                                      translational modification, or chemically
                                      modifications like labeling, it can be
                                      specified here', required=False)
        value           : include('Polymer_modifications', required=False)

    expression_source_type:
        description     : str(equals='How the polymer was produced',
                              required=False)
        value           : enum('Natively', 'Recombinantly', 'Synthetically')

    expression_organism:
        description     : str(equals='The biological species where the polymer
                                      naturally occurs. Note that this is based
                                      on the NCBI taxonomy', required=False)
        value           : vocabulary(vocabulary='organisms',
                                     fields='[id,title,props.rank]',
                                     required=False)
                                     
    additional_specifications:
        description     : str(equals='Additional information about the polymer
                                      can be specified here', required=False)
        value           : list(str(), required=False)


Polymer_modifications:
    synthesis:
        description     : str(equals='Modifications (e.g. non-natural amino
                                      acids) of the polymer made during
                                      synthesis (e.g. translation) of the
                                      polymer', required=False)
        value           : list(nested_include('Modification'), required=False)

    biological_postprocessing:
        description     : str(equals='Modifications of the polymer made
                                      after synthesis (e.g. posttranslational
                                      modifications, DNA methylation) by the
                                      organism where synthesis occurred
                                      (e.g. glycosylation)', required=False)
        value           : list(nested_include('Modification'), required=False)

    chemical:
        description     : str(equals='Modifications of the polymer introduced by
                                      chemical, biochemical, or physical means
                                      in vitro (e.g. lysine methylation,
                                      cysteine iodoacetamide labeling,
                                      deglycosylation, covalent fluorescent
                                      labeling)', required=False)
        value           : list(nested_include('Modification'), required=False)

---
# Entities and constituents
Chemical_information:
    chemical_environments:
        description : str(equals='Composition of the chemical environment
                                  (colloquially known as buffer) which are
                                  not being directly used to affect the
                                  behavior of the directly measured
                                  entities during the measurement',
                          required=False)
        value       : list(nested_include('Chemical_environment'), min=1)

    entities_of_interest:
        description : str(equals='List of the entities that are being
                                  directly measured, as well as the entities
                                  that are being used as a variable to
                                  influence the behavior of the directly
                                  measured entities (e.g. lysozyme, NAG3,
                                  NaCl)', required=False)
        value       : list(nested_include('Entity'), min=1)

Chemical:
    inchikey:
        description     : str(equals='InChIKey identifier of the chemical.
                                      In case of chemical polymers please
                                      specify the InChIKey of the monomer and
                                      specify the specific type in the
                                      additional identifiers field (e.g. if
                                      PEG 3350 was employed, the InChiKey of
                                      ethylene glycol, i.e.
                                      LYCAIKOWRPUZTN-UHFFFAOYSA-N should be
                                      specified here)', required=False)
        default_search  : True
        value           : keyword()

    additional_identifiers:
        description     : str(equals='Unique and persistent identifier from an
                                      external source; options of sources are
                                      CAS number, Pubchem Compound ID, and
                                      Pubchem Substance ID', required=False)
        value           : list(chemical_id(), required=False)

    isotopic_labeling:
        description     : str(equals='If the isotopic composition of the
                                      chemical was altered from the naturally
                                      occurring abundances, it can be specified here
                                      (e.g. 15N, 13C)', required=False)
        value           : keyword(required=False)

    molecular_weight:
        description     : str(equals='The molecular weight of the polymer',
                              required=False)
        value           : include('Molecular_weight')

    additional_specifications:
        description      : str(equals='Additional information about the chemical
                                      can be specified here (e.g. RNase free
                                      water, recrystallization, desalting)',
                               required=False)
        value            : list(str(), required=False)

Chemical_environment:
    id:
        description     : str(equals='Unique ID for the chemical environment
                                      to be used as a link', required=False)
        value           : link_target(name="chemical-environment")

    name:
        description     : str(equals='Name of the chemical environment (e.g.
                                      Measurement Buffer). The name must be
                                      unique within a record as it will be
                                      referred to the in method specific section
                                      in when describing the composition of the
                                      individual samples or measurement steps',
                                      required=False)
        value           : str()

    solvent: 
        description     : str(equals='Information about the solvent component(s)
                                      of the chemical environment (e.g. water,
                                      D2O, DMSO, EtOH) can be specified here',
                                      required=False)
        value           : list(nested_include('Chemical_constituent'))

    constituents:
        description     : str(equals='List of the constituents, excluding
                                      solvent components, that made up the
                                      chemical environment (i.e. buffer system,
                                      salts, surfactants, crowding agents,
                                      serum, etc.)',
                              required=False)
        value           : list(nested_include('Constituent'), required=False)

    ph:
        description     : str(equals='The pH value of the chemical environment
                                      and how the value was determined',
                              required=False)
        value           : include('Ph')

    additional_specifications:
        description     : str(equals='Additional information about the chemical
                                      environment can be specified here (e.g.
                                      prepared just prior to conducting the
                                      measurement, additional treatments like UV
                                      irradiation, specific storage container of
                                      chemical environment if that influenced
                                      the measurement etc.)',
                              required=False)
        value           : list(str(), required=False)

Constituent_base:
    name:
        description     : str(equals='Short descriptive name (id) of the
                                      constituent, must be unique within
                                      a record (e.g. NaCl, Human serum P1,
                                      Lysozyme, etc.)', required=False)
        default_search  : True
        value           : str()

    type:
        description     : str(equals='The type of the constituent, options are
                                      Polymer, Chemical, and defined assembly',
                              required=False)
        value           : enum('Polymer',
                               'Chemical',
                               'Molecular assembly',
                               'Complex substance of biological origin',
                               'Complex substance of environmental origin',
                               'Complex substance of chemical origin',
                               'Complex substance of industrial production origin')

    concentration:
        description     : str(equals='Concentration of the constituent
                                      including its relative concentration
                                      related to the collected sample or
                                      absolute concentration of the
                                      constituent', required=False)
        value           : include('Concentration')

Chemical_constituent_base:
    name:
        description     : str(equals='Short descriptive name (id) of the
                                      constituent, must be unique within
                                      a record', required=False)
        default_search  : True
        value           : str()

    type:
        description     : str(equals='The type of the constituent, options are
                                      Chemical',
                              required=False)
        value           : enum('Chemical')

    concentration:
        description     : str(equals='Concentration of the constituent including
                                      its relative concentration related to the
                                      collected sample or absolute concentration
                                      of the constituent', required=False)
        value           : include('Concentration')

Chemical_constituent:
    description         : str(equals='The details about the chemically defined
                                      constituent i.e. of type Polymer,
                                      Chemical, and Molecular assembly',
                              required=False)
    value               : choose(include('Chemical_constituent_base'),
                                 Chemical=include('Chemical'))

Chemically_defined_constituent_base:
    name:
        description     : str(equals='Short descriptive name (id) of the
                                      constituent, must be unique within
                                      a record', required=False)
        default_search  : True
        value           : str()

    type:
        description     : str(equals='The type of the constituent, options are
                                      Polymer, Chemical, and defined assembly',
                              required=False)
        value           : enum('Polymer',
                               'Chemical',
                               'Molecular assembly')

    concentration:
        description     : str(equals='Concentration of the constituent
                                      including its relative concentration
                                      related to the collected sample or
                                      absolute concentration of the
                                      constituent', required=False)
        value           : include('Concentration')

Chemically_defined_constituent:
    description         : str(equals='The details about the chemically defined
                                      constituent i.e. of type Polymer,
                                      Chemical, and Molecular assembly',
                              required=False)
    value               : choose(include('Chemically_defined_constituent_base'),
                                 Polymer=include('Polymer'),
                                 Chemical=include('Chemical'),
                                 Molecular_assembly=include('Molecular_assembly'))


Constituent:
    description         : str(equals='The details about the constituent which
                                      can be of chemically well defined
                                      species of type Polymer, Chemical,
                                      Molecular assembly. Alternatively, if the
                                      constituent can only be defined in terms
                                      of a preparation protocol it should be
                                      described as a Complex substance of
                                      biological, environmental, chemical, or
                                      industrial production origin',
                              required=False)
    value               : choose(include('Constituent_base'),
                                 Polymer=include('Polymer'),
                                 Chemical=include('Chemical'),
                                 Molecular_assembly=include('Molecular_assembly'),
                                 Complex_substance_of_biological_origin=include('Complex_substance_of_biological_origin'),
                                 Complex_substance_of_environmental_origin=include('Complex_substance_of_environmental_origin'),
                                 Complex_substance_of_chemical_origin=include('Complex_substance_of_chemical_origin'),
                                 Complex_substance_of_industrial_production_origin=include('Complex_substance_of_industrial_production_origin'))

Complex_substance_of_biological_origin:
    description         : str(equals='Information about the biological substance
                                      the complex substance is derived from',
                              required=False)
    value               : choose(include('Complex_substance_of_biological_origin_base'),
                                 type_field='derived_from',
                                 Body_fluid=include('Body_fluid'),
                                 Cell_fraction=include('Cell_fraction'),
                                 Virion=include('Virion'))

Complex_substance_of_biological_origin_base:
    derived_from:
        description     : str(equals='The biological substance the complex
                                      substance is derived from')
        value           : enum('Body fluid',
                               'Cell fraction',
                               'Virion')
    source_organism:
        description     : str(equals='Identification of the organism to the
                                      lowest taxonomic rank possible e.g.
                                      strain. Note that this is based on the
                                      NCBI taxonomy', required=False)
        default_search  : True
        value           : vocabulary(vocabulary='organisms',
                                     fields='[id,title,props.rank]')

    preparation_protocol:
        description     : str(equals='List of the steps performed during the
                                      preparation of the complex substance',
                              required=False)
        value           : list(include('Step'))

    storage:
        description     : str(equals='Information about how the complex
                                      substance was stored between being
                                      acquired and measured, including
                                      temperature and duration', required=False)
        value           : include('Storage', required=False)

    additional_specifications:
        description     : str(equals='Additional information about the complex
                                      substance can be specified here',
                              required=False)
        value           : list(str(), required=False)

Body_fluid:
    fluid:
        description     : str(equals='The body fluid the complex
                                      substance is derived from',
                              required=False)
        default_search  : True
        value           : enum('Blood', 'Fecal matter', 'Milk',
                               'Plasma', 'Saliva', 'Serum', 'Urine',
                               'Plant extract')
    health_status:
        description     : str(equals='Health status of the donor organism where
                                      the body fluid was derived from
                                      (e.g. healthy, sick, patient with
                                      Diabetes type 2)',
                              required=False)
        value           : keyword()

Cell_fraction:
    fraction:
        description     : str(equals='The subcelluar component e.g. (Ribosome)',
                              required=False)
        default_search  : True
        value           : enum('Ribosome', 'Cell wall', 'Vesicle'
                               'Cell lysate/Cytoplasm', 'Cell Membrane',
                               'Extracellular matrix', 'Lysosome',
                               'Golgi Apparatus', 'Mitochondrion', 'Nucleus',
                               'Rough Endoplasmic Reticulum',
                               'Smooth Endoplasmic Reticulum',
                               'Vacuole','Chloroplast')

    organ:
        description     : str(equals='The organ the cell fraction was
                                      derived from (e.g. heart)',
                              required=False)
        value           : keyword(required=False)

    tissue:
        description     : str(equals='The tissue type the cell fraction was
                                      derived from', required=False)
        value           : str(required=False)

    cell_type:
        description     : str(equals='The cell type the cell fraction was
                                      derived from', required=False)
        value           : str(required=False)

    health_status:
        description     : str(equals='Health status of the donor organism
                                      where the cell fraction was derived from
                                      (e.g. healthy, sick, patient with
                                      Diabetes type 2)', required=False)
        value           : keyword()

Virion:
    genetic_material:
        description     : str(equals='The genetic material carried by the
                                      virions (None, virus genome, synthetic)',
                              required=False)
        value           : enum('No genetic material', 'Virus genome',
                               'Synthetic')

    capsid_type:
        description     : str(equals='The type of virion capsid (e.g.
                                      genetically engineered, None',
                                      required=False)
        value           : enum('None', 'Native', 'Genetically Engineered',
                               'Synthetic')

    envelope_type:
        description     : str(equals='The type of virion envelope (e.g.
                                      genetically engineered, None',
                              required=False)
        value           : enum('None', 'Native', 'Genetically Engineered',
                               'Synthetic')
    host_organism:
        description     : str(equals='The host organism the virion was produced
                                      in. Note that information is based on the
                                      NCBI taxonomy', required=False)
        value           : vocabulary(vocabulary='organisms',
                                     fields='[id,title,props.rank]',
                                     required=False)

    host_cell_type:
        description     : str(equals='The host cell type the virion was
                                      produced in', required=False)
        value           : str(required=False)
        


Complex_substance_of_environmental_origin:
    source:
        description     : str(equals='The environmental source where the complex
                                      substance was derived from',
                              required=False)
        default_search  : True
        value           : enum('Fresh water', 'Marine', 'Ice core', 'Sediment',
                               'Sewage', 'Soil')

    preparation_protocol:
        description     : str(equals='List of the steps performed during the
                                      preparation of the complex substance',
                              required=False)
        value           : list(include('Step'))

    location:
        description     : str(equals='The coordinates, in decimal notation,
                                      where the complex substance was
                                      collected', required=False)
        value           : include('Coordinates')

    storage:
        description     : str(equals='Information about how the complex
                                      substance was stored between being
                                      acquired and measured, including
                                      temperature and duration', required=False)
        value           : include('Storage', required=False)

    additional_specifications:
        description     : str(equals='Additional information about the complex
                                      substance can be specified here',
                              required=False)
        value           : list(str(), required=False)


Complex_substance_of_chemical_origin:
    class:
        description     : str(equals='The chemical origin where the
                                      complex substance was derived from',
                              required=False)
        value           : enum('Lipid_assembly')

    details:
        description     : str(equals='The chemical origin where the
                                      complex substance was derived from',
                              required=False)
        value           : include('Lipid_assembly')

    preparation_protocol:
        description     : str(equals='List of the steps performed during the
                                      preparation of the complex substance',
                              required=False)
        value           : list(include('Step'))

    storage:
        description     : str(equals='Information about how the complex
                                      substance was stored between being
                                      acquired and measured, including
                                      temperature and duration', required=False)
        value           : include('Storage', required=False)

    additional_specifications:
        description     : str(equals='Additional information about the complex
                                      substance can be specified here',
                              required=False)
        value           : list(str(), required=False)


Lipid_assembly:
    type:
        description     : str(equals='The type of lipid assembly',
                              required=False)
        value           : enum('Micelle', 'Liposome', 'Nanodisc', 'Sheet')

    number_of_mono_layers:
        description     : str(equals='The number of lipid mono layers in the
                                      lipid assembly, -1 if unknown',
                              required=False)
        value           : int(min=-1)

    size:
        description     : str(equals='The size of the lipid assembly',
                              required=False)
        value           : include('Size')

    components:
        description     : str(equals='The components of the lipid assembly')
        value           : list(nested_include('Assembly_component'))

    additional_specifications:
        description     : str(equals='Additional information about the lipid
                                      assembly, if applicable', required=False)
        value           : list(include('Step'), required=False)

Complex_substance_of_industrial_production_origin:
    product:
        description     : str(equals='The type of product, byproduct, or waste
                                      product the complex substance was derived
                                      from', required=False)
        default_search  : True
        value           : enum('Beer', 'Cell medium', 'Whey')

    preparation_protocol:
        description     : str(equals='List of the steps performed during the
                                      preparation of the complex substance',
                              required=False)
        value           : list(include('Step'))

    storage:
        description     : str(equals='Information about how the complex
                                      substance was stored between being
                                      acquired and measured, including
                                      temperature and duration', required=False)
        value           : include('Storage', required=False)

    additional_specifications:
        description     : str(equals='Additional information about the complex
                                      substance can be specified here',
                              required=False)
        value           : list(str(), required=False)

---
# People, publications, and funding objects

Depositors:
    depositor:
        description : str(equals='The person who made the deposition to
                                  MBDB', required=False)
        value       : include('Person')

    principal_contact:
        description : str(equals='The person responsible for the record and
                                  the one to contact for inquiries, would
                                  typically be the principle investigator
                                  group leader, or laboratory head',
                          required=False)
        value       : include('Person')

    contributors:
        description : str(equals='List of other people who contributed to
                                  generating the deposited data, metadata,
                                  results , or the deposition
                                  itself', required=False)
        value       : list(nested_include('Person'), required=False)

Person:
    given_name:
        description     : str(equals='The given name(s), including
                                      middlename(s), of the person',
                              required=False)
        default_search  : True
        value           : str()

    family_name:
        description     : str(equals='The family name(s) the person',
                              required=False)
        default_search  : True
        value           : str()

    identifiers:
        description     : str(equals='Persistent personal identifiers,
                                      currently only ORCIDs are allowed',
                              required=False)
        default_search  : True
        value           : list(person_id(), required=False)

    affiliations:
        description     : str(equals='The affiliation of the person. Note that
                                      this is based on the Research Organization
                                      Registry (ROR)', required=False)
        default_search  : True
        value           : list(vocabulary(vocabulary='affiliations',
                               fields='[id, title, props.city, props.state, props.country]'),
                               required=False)

Publication:
    pid:
        description     : str(equals='Persistent identifier associated with the
                                      publication (e.g. DOI, ISBN, URN)',
                              required=False)
        default_search  : True
        value           : publication_id()

    title:
        description     : str(equals='The title of the publication',
                              required=False)
        default_search  : True
        value           : str(required=False)

    resource_type:
        description     : str(equals='The type of publication', required=False)
        value           : enum('Article', 'Book', 'Thesis')

---
# Result definitions

Result_base:
    id:
        description     : str(equals='Unique ID for the result to be
                                      used as a link', required=False)
        value           : link_target(name="result")

    name:
        description     : str(equals='Descriptive name (id) of the result 
                                      (e.g. Kd of Lysozyme and VHH2).
                                      Must be unique within a record',
                              required=False)
        default_search  : True
        value           : str()

    type:
        description     : str(equals='The type of physical parameter the 
                                      result represents', required=False)
        default_search  : True
        value           : enum('Concentration',
                               'Stoichiometry',
                               'Constant of association (KA)',
                               'Constant of dissociation (KD)',
                               'Half maximal effective concentration (EC50)',
                               'Hill coefficient',
                               'Association rate (kOn)',
                               'Dissociation rate (kOff)',
                               'Change in enthalpy (deltaH)',
                               'Change in entropy (deltaS)',
                               'Change in Gibbs free energy (deltaG)',
                               'Molecular weight (MW)')

    entities_involved:
        description     : str(equals='List of chemical or molecular assemblies
                                      the result describes and how
                                      many copies of each are involved',
                              required=False)
        value           : list(nested_include('Entity_and_stoichiometry'),
                               min=1)

    value:
        description     : str(equals='Numerical value of the result',
                              required=False)
        value           : num()

    value_error:
        description     : str(equals='The expected error of the result (e.g. in terms of
                                      standard deviations, or relative error)',
                              required=False)
        value           : include('Value_error', required=False)

Result:
    description         : str(equals='Details of the result', required=False)
    value               : choose(include('Result_base'),
                                 Concentration=include('Result_concentration'),
                                 Stoichiometry=include('Result_stoichiometry'),
                                 Constant_of_association_KA=include('Result_KA'),
                                 Constant_of_dissociation_KD=include('Result_KD'),
                                 Association_rate_kOn=include('Result_kOn'),
                                 Dissociation_rate_kOff=include('Result_kOff'),
                                 Change_in_enthalpy_deltaH=include('Result_deltaH'),
                                 Change_in_entropy_deltaS=include('Result_deltaS'),
                                 Change_in_Gibbs_free_energy_deltaG=include('Result_deltaG'),
                                 Molecular_weight_MW=include('Result_MW'),
                                 Half_maximal_effective_concentration_EC50=include('Result_EC50'),
                                 Hill_coefficient=include('Result_hill_coeff'),
                                )    

Result_concentration:
    unit:
        description     : str(equals='Unit of the concentration',
                              required=False)
        value           : include('CONCENTRATION_UNITS')

Result_stoichiometry:
    unit:
        description     : str(equals='Unit of the stoichiometry',
                              required=False)
        value           : enum('per complex')

Result_KA:
    unit:
        description     : str(equals='Unit of the constant of association',
                              required=False)
        value           : enum('M^-1', 'M^-2',
                               'mM^-1', 'mM^-2',
                               'µM^-1', 'µM^-2',
                               'nM^-1', 'nM^-2'
                               )

Result_KD:
    unit:
        description     : str(equals='Unit of the constant of dissociation',
                              required=False)
        value           : enum('M', 'M^2', 
                               'mM', 'mM^2',
                               'µM', 'µM^2',
                               'nM', 'nM^2'
                               )

Result_kOn:
    unit:
        description     : str(equals='Unit of the association rate constant',
                              required=False)
        value           : enum('M^-1 s^-1', 'M^-2 s^-1',
                               'mM^-1 s^-1', 'mM^-2 s^-1',
                               'µM^-1 s^-1', 'µM^-2 s^-1', 
                               'nM^-1 s^-1', 'nM^-2 s^-1'
                               )
Result_kOff:
    unit:
        description     : str(equals='Unit of the dissociation rate constant',
                              required=False)
        value           : enum('s^-1')

Result_deltaH:
    unit:
        description     : str(equals='Unit of the change in enthalpy rate constant',
                              required=False)
        value           : include('ENERGY_UNITS')

Result_deltaS:
    unit:
        description     : str(equals='Unit of the change in enthalpy rate constant',
                              required=False)
        value           : enum('kcal/molK','kJ/molK' )

Result_deltaG:
    unit:
        description     : str(equals='Unit of the change in enthalpy rate constant',
                              required=False)
        value           : include('ENERGY_UNITS')

Result_MW:
    unit:
        description     : str(equals='Unit of the change in enthalpy rate constant',
                              required=False)
        value           : include('MOLECULAR_WEIGHT_UNITS')    

Result_EC50:
    unit:
        description     : str(equals='Unit of the half maximal effective concentration',
                              required=False)
        value           : include('CONCENTRATION_UNITS')    
        
Result_hill_coeff:
    unit:
        description     : str(equals='Unit of the Hill coefficient',
                              required=False)
        value           : enum("unitless")    

Entity_and_stoichiometry:
    entity:
        description     : str(equals='Name (ids) of the entity (from the
                                      entities of interest defined in the
                                      general parameters)', required=False)
        value           : link(target='entity')


    copy_number:
        description     : str(equals='Number of copies of the entity that
                                      contribute to the result, -1
                                      if unknown (e.g. if two individual copies
                                      of a polymer binds to another, the copy
                                      number would be 2)',
                              required=False)
        value           : num(min=-1)

---
# Processing objects

Modification:
    position:
        description     : str(equals='The position where the modification
                                      occurs', required=False)
        value           : str(required=False)

    modification:
        description     : str(equals='The common name/type of the modification',
                              required=False)
        value           : str()

    protocol:
        description     : str(equals='List of steps that led to the modification
                                      taking place', required=False)
        value           : list(include('Step'), required=False)

Step:
    name:
        description     : str(equals='Descriptive name of the step',
                              required=False)
        value           : str()

    description:
        description     : str(equals='Short description of the step',
                              required=False)
        value           : str()

Data_fitting:
    model:
        description     : str(equals='Description of the model (e.g.
                                      1:1 binding)', required=False)
        value           : str()

    software_name:
        description     : str(equals='The name of the software that was used for
                                      doing the data fitting (e.g. Excel)',
                              required=False)
        value           : str(required=False)

    software_version:
        description     : str(equals='The version of the software that was used
                                      for the step', required=False)
        value           : keyword(required=False)

    quality:
        description     : str(equals='Numerical value representing the quality
                                      estimate of the result',
                              required=False)
        value           : num(required=False)

    quality_type:
        description     : str(equals='Type of the quality estimate',
                                      required=False)
        value           : enum('R^2', 'SEM', 'red. Chi^2', '1sigma', '2sigma',
                               '3sigma', '5sigma', 'Skewness', required=False)

Processing_step:
    name:
        description     : str(equals='Short descriptive name of the processing
                                      step', required=False)
        value           : str()

    description:
        description     : str(equals='Description of what the processing step
                                      was', required=False)
        value           : str()

    software_name:
        description     : str(equals='The name of the software that was
                                      used for the step (e.g. Excel)',
                              required=False)
        value           : str(required=False)

    software_version:
        description     : str(equals='The version of the software that was
                                      used for the step', required=False)
        value           : keyword(required=False)

    link_to_source_code:
        description     : str(equals='If processing was performed with software
                                      where the source code is legally available
                                      a link can be specified here (e.g.
                                      self-written python script in a GitHub
                                      repository', required=False)
        value           : url(required=False)

---
# Physical and chemical parameter objects

Value_error:
    lower_error:
        description     : str(equals='The upper error, i.e. the number that
                                      should be added to the value to get
                                      the upper bound. The same unit as the value
                                      being described is assumed, if relative errors 
                                      are provided, please provide it in fractional 
                                      form (e.g.  0.01 for 1 %)', required=False)
        value           : num()

    lower_error:
        description     : str(equals='The lower error, i.e. the number that
                                      should be subtracted from the value to get
                                      the lower bound. The same unit as the value
                                      being described is assumed, if relative errors 
                                      are provided, please provide it in fractional 
                                      form (e.g.  0.01 for 1 %)', required=False)
        value           : num()

    is_relative:
        description     : str(equals='True if the error values given should be 
                                      interpreted as relative errors (fractional 
                                      uncertainty) ',
                              required=False)
        value           : bool()

Ph:
    value:
        description     : str(equals='The pH value of the solution',
                              required=False)
        value           : num()

    value_error:
        description     : str(equals='The reported error of the value of
                                      pH (e.g. standard deviation, % error)',
                              required=False)
        value           : include('Value_error', required=False)

Temperature:
    value:
        description     : str(equals='The numeric value of the temperature',
                              required=False)
        value           : num()

    unit:
        description     : str(equals='The unit of temperature',
                              required=False)
        value           : include('TEMPERATURE_UNITS')

Pressure:
    value:
        description     : str(equals='The numeric value of the pressure',
                              required=False)
        value           : num()

    value_error:
        description     : str(equals='The reported error of the value of the
                                      pressure (e.g. standard deviation, %
                                      error)',required=False)
        value           : include('Value_error', required=False)

    unit:
        description     : str(equals='The unit of the pressure', required=False)
        value           : include('PRESSURE_UNITS')

    obtained_by:
        description     : str(equals='The means through which the pressure value
                                      was obtained', required=False)
        value           : include('OBTAINED_TYPES')

    is_controlled:
        description     : str(equals='Whether the pressure was actively
                                      controlled', required=False)
        value           : bool()

Humidity:
    value:
        description     : str(equals='The numeric value of the humidity',
                              required=False)
        value           : num()

    value_error:
        description     : str(equals='The reported error of the value of the
                                      humidity (e.g. standard
                                      deviation, % error)',required=False)
        value           : include('Value_error', required=False)

    unit:
        description     : str(equals='The unit of the humidity',
                              required=False)
        value           : include('HUMIDITY_UNITS')

    obtained_by:
        description     : str(equals='The means through which the humidity value
                                      was obtained', required=False)
        value           : include('OBTAINED_TYPES')

    is_controlled:
        description     : str(equals='Whether the humidity was actively
                                      controlled', required=False)
        value           : bool()

Atmosphere:
    composition:
        description     : str(equals='List of gases and their concentrations the
                                      atmosphere was composed of',
                              required=False)
        value           : list(nested_include('Chemical_constituent'), min=1)

Time_duration:
    value:
        description     : str(equals='The numerical value of the time point or
                                      duration', required=False)
        value           : num(min=0)

    unit:
        description     : str(equals='The unit of the time duration',
                              required=False)
        value           : include('TIME_UNITS')

Concentration:
    value:
        description     : str(equals='The numerical value of the concentration,
                                      -1 if unknown', required=False)
        value           : num(min=-1)

    unit:
        description     : str(equals='The unit of the concentration',
                              required=False)
        value           : include('CONCENTRATION_UNITS')

Molecular_weight:
    value:
        description     : str(equals='The numerical value of the molecular
                                      weight', required=False)
        value           : num()

    unit:
        description     : str(equals='The unit of the molecular weight',
                              required=False)
        value           : include('MOLECULAR_WEIGHT_UNITS')

Size:
    type:
        description     : str(equals='The type of size (e.g. radius)',
                              required=False)
        value           : enum('radius', 'diameter', 'path length')

    mean:
        description     : str(equals='The mean of the size', required=False)
        value           : num(min=0)

    unit:
        description     : str(equals='The unit of the size', required=False)
        value           : include('LENGTH_UNITS')

    median:
        description     : str(equals='The median of the size', required=False)
        value           : num(min=0, required=False)

    upper:
        description     : str(equals='The upper bound of the size',
                              required=False)
        value           : num(required=False)

    lower:
        description     : str(equals='The lower bound of the size',
                              required=False)
        value           : num(required=False)

---
# Additional objects

Storage:
    temperature:
        description     : str(equals='The temperature the sample was stored at',
                              required=False)
        value           : include('Temperature')

    duration:
        description     : str(equals='Length of time the sample was stored
                                      before being measured', required=False)
        value           : include('Time_duration', required=False)

    storage_preparation:
        description     : str(equals='The specific steps that were taken to
                                      prepare the samples for storage (e.g.
                                      flash freezing in liquid nitrogen),
                                      if applicable', required=False)
        value           : list(include('Step'), required=False)

Supplier:
    name:
        description     : str(equals='Name of the supplier', required=False)
        value           : str()

    catalog_number:
        description     : str(equals='The catalog number or identifier of the
                                      item', required=False)
        value           : keyword(required=False)

    further_information:
        description     : str(equals='Further information e.g. batch number',
                              required=False)
        value           : list(str(), required=False)

Coordinates:
    latitude:
        description     : str(equals='The latitude, from south to north, in
                                      degrees (decimal notation)',
                              required=False)
        value           : num(min=-90, max=90)

    longitude:
        description     : str(equals='The longitude, from west to east, in
                                      degrees (decimal notation)',
                              required=False)
        value           : num(min=-180, max=180)

OBTAINED_TYPES          : enum('Measurement', 'Calculation', 'Assumption', 
                               required=False)
---
# Unit definitions

CONCENTRATION_UNITS     : enum('M', 'mM', 'µM', 'nM', 'pM', 'fM', 'aM',
                               'g/L', 'mg/mL', 'µg/mL', 'ng/mL',
                               'mol/kg', 'mmol/kg',
                               'v/v %','w/w %', 'v/w %', 'w/v %',
                               'U/ml','% saturated', required=False)
FLOWRATE_UNITS          : enum('mL/min','µl/s', required=False)
HUMIDITY_UNITS          : enum('%','g/m^3','oz/y^3', required=False)
PRESSURE_UNITS          : enum('Pa', 'kPa', 'MPa',
                               'Bar','mBar',
                               'atm',
                               'Torr',
                               'PSI',
                               'mmHg','inchHg', required=False)
TEMPERATURE_UNITS       : enum('K', '°C', '°F')
TIME_UNITS              : enum('nanoseconds','microseconds', 'milliseconds',
                               'seconds','minutes', 'hours', 'days', 'months',
                               'years', required=False)
ENERGY_UNITS            : enum('kcal/mol','kJ/mol', required=False)
POWER_UNITS             : enum('µcal/s','µJ/s', required=False)
LENGTH_UNITS            : enum('Å', 'nm', 'μm', 'mm', 'cm', 'm', required=False)
MOLECULAR_WEIGHT_UNITS  : enum('g/mol', 'Da', 'kDa', 'MDa', required=False)

---
# Techniques and company definitions

SUPPORTED_TECHNIQUES    : enum('Bio-layer interferometry (BLI)',
                               'Microscale thermophoresis/Temperature related
                                intensity change (MST/TRIC)',
                               'Surface plasmon resonance (SPR)',
                               required=False)

# Likely incomplete
COMPANIES               : enum('Bio-Rad',
                               'Bruker',
                               'Cytiva',
                               'Gatorbio',
                               'GE Healthcare',
                               'Nanotemper',
                               'Nicoya Life',
                               'Sartorius',
                               'Malvern Panalytical',
                               'Refeyn',
                               'TA Instruments',
                               required=False)
