general_parameters: include('General_parameters')
---
General_parameters:
  schema_version: keyword(equals='0.9.18')
  record_information: include('Record_information')
  depositors: include('Depositors')
  associated_publication: include('Publication', required=False)
  funding_references: list(vocabulary(vocabulary='grants', fields='[id,title,props.funder_name]'),
    required=False)
  technique: include('SUPPORTED_TECHNIQUES')
  collection_start_time: day()
  instrument: include('Instrument')
  entities_of_interest: list(nested_include('Entity'), min=1)
  chemical_environments: list(nested_include('Chemical_environment'), min=1)
  results: list(nested_include('Result'), required=False)
  raw_measurement_files: list(url(), required=False)
---
Record_information:
  title: str()
  access_rights: enum('open access', 'embargoed access', 'restricted access')
  metadata_access_rights: enum('open access', 'embargoed access', 'restricted access')
  publisher: keyword(equals='MBDB')
  resource_type_general: keyword(equals='Dataset')
  resource_type: keyword()
  external_identifier: database_id(required=False)
  subject_category: keyword(equals='Biophysics')
  deposition_date: day()
  date_available: day(required=False)
---
Instrument:
  manufacturer: include('COMPANIES')
  name: str()
---
Entity_base:
  id: link_target(name="entity")
  name: str()
  type: enum('Polymer', 'Chemical', 'Molecular assembly', 'Complex substance of biological
    origin', 'Complex substance of environmental origin', 'Complex substance of chemical
    origin', 'Complex substance of industrial origin')
Entity: choose(include('Entity_base'), Polymer=include('Polymer'), Chemical=include('Chemical'),
  Molecular_assembly=include('Molecular_assembly'), Complex_substance_of_biological_origin=include('Complex_substance_of_biological_origin'),
  Complex_substance_of_environmental_origin=include('Complex_substance_of_environmental_origin'),
  Complex_substance_of_chemical_origin=include('Complex_substance_of_chemical_origin'),
  Complex_substance_of_industrial_origin=include('Complex_substance_of_industrial_origin')
  )
Entity_constituent:
  entity: link(target='entity')
  concentration: include('Concentration')
---
Molecular_assembly:
  external_databases: list(database_id(), required=False)
  components: list(nested_include('Assembly_component'), min=1)
  molecular_weight: include('Molecular_weight')
  chemical_modifications: list(nested_include('Modification'), required=False)
  quality_controls: include('Quality_controls', required=False)
  additional_specifications: list(str(), required=False)
Assembly_component_base:
  name: str()
  type: enum('Polymer', 'Chemical')
  copy_number: num(min=-1)
Assembly_component: choose(include('Assembly_component_base'), Polymer=include('Polymer'),
  Chemical=include('Chemical'))
---
Polymer:
  polymer_type: enum('cyclic-pseudo-peptide', 'peptide nucleic acid', 'polydeoxyribonucleotide',
    'polydeoxyribonucleotide/polyribonucleotide hybrid', 'polypeptide(D)', 'polypeptide(L)',
    'polyribonucleotide')
  sequence: str(required=False)
  molecular_weight: include('Molecular_weight')
  external_databases: list(database_id(), required=False)
  variant: str(required=False)
  source_organism: vocabulary(vocabulary='organisms', fields='[id,title,props.rank]',
    required=False)
  expression_source_type: enum('Natively', 'Recombinantly', 'Synthetically')
  expression_organism: vocabulary(vocabulary='organisms', fields='[id,title,props.rank]',
    required=False)
  modifications: include('Polymer_modifications', required=False)
  quality_controls: include('Quality_controls', required=False)
  additional_specifications: list(str(), required=False)
Polymer_modifications:
  synthesis: list(nested_include('Modification'), required=False)
  biological_postprocessing: list(nested_include('Modification'), required=False)
  chemical: list(nested_include('Modification'), required=False)
---
Chemical:
  inchikey: keyword()
  additional_identifiers: list(chemical_id(), required=False)
  isotopic_labeling: keyword(required=False)
  molecular_weight: include('Molecular_weight')
  additional_specifications: list(str(), required=False)
Chemical_environment:
  id: link_target(name="chemical-environment")
  name: str()
  solvent: list(nested_include('Chemical_constituent'))
  constituents: list(nested_include('Constituent'), required=False)
  ph: num()
  additional_specifications: list(str(), required=False)
Constituent_base:
  name: str()
  type: enum('Polymer', 'Chemical', 'Molecular assembly', 'Complex substance of biological
    origin', 'Complex substance of environmental origin', 'Complex substance of chemical
    origin', 'Complex substance of industrial origin')
  concentration: include('Concentration')
Chemical_constituent_base:
  name: str()
  type: enum('Chemical')
  concentration: include('Concentration')
Chemical_constituent: choose(include('Chemical_constituent_base'), Chemical=include('Chemical'))
Chemically_defined_constituent_base:
  name: str()
  type: enum('Polymer', 'Chemical', 'Molecular assembly')
  concentration: include('Concentration')
Chemically_defined_constituent: choose(include('Chemically_defined_constituent_base'),
  Polymer=include('Polymer'), Chemical=include('Chemical'), Molecular_assembly=include('Molecular_assembly'))
Constituent: choose(include('Constituent_base'), Polymer=include('Polymer'), Chemical=include('Chemical'),
  Molecular_assembly=include('Molecular_assembly'), Complex_substance_of_biological_origin=include('Complex_substance_of_biological_origin'),
  Complex_substance_of_environmental_origin=include('Complex_substance_of_environmental_origin'),
  Complex_substance_of_chemical_origin=include('Complex_substance_of_chemical_origin'),
  Complex_substance_of_industrial_origin=include('Complex_substance_of_industrial_origin'))
Complex_substance_of_biological_origin: choose(include('Complex_substance_of_biological_origin_base'),
  type_field='derived_from', Body_fluid=include('Body_fluid'), Cell_fraction=include('Cell_fraction'),
  Virion=include('Virion'))
Complex_substance_of_biological_origin_base:
  derived_from: enum('Body fluid', 'Cell fraction', 'Virion')
  source_organism: vocabulary(vocabulary='organisms', fields='[id,title,props.rank]')
  preparation_protocol: list(include('Step'))
  storage: include('Storage', required=False)
  additional_specifications: list(str(), required=False)
Body_fluid:
  fluid: enum('Blood', 'Fecal matter', 'Milk', 'Plasma', 'Saliva', 'Serum', 'Urine',
    'Plant extract')
  health_status: keyword()
Cell_fraction:
  fraction: enum('Ribosome', 'Cell wall', 'Vesicle' 'Cell lysate/Cytoplasm', 'Cell
    Membrane', 'Extracellular matrix', 'Lysosome', 'Golgi Apparatus', 'Mitochondrion',
    'Nucleus', 'Rough Endoplasmic Reticulum', 'Smooth Endoplasmic Reticulum', 'Vacuole','Chloroplast')
  organ: keyword(required=False)
  tissue: str(required=False)
  cell_type: str(required=False)
  health_status: keyword()
Virion:
  genetic_material: enum('No genetic material', 'Virus genome', 'Synthetic')
  capsid_type: enum('None', 'Native', 'Genetically Engineered', 'Synthetic')
  envelope_type: enum('None', 'Native', 'Genetically Engineered', 'Synthetic')
  host_organism: vocabulary(vocabulary='organisms', fields='[id,title,props.rank]',
    required=False)
  host_cell_type: str(required=False)
Complex_substance_of_environmental_origin:
  source: enum('Fresh water', 'Marine', 'Ice core', 'Sediment', 'Sewage', 'Soil')
  preparation_protocol: list(include('Step'))
  location: include('Coordinates')
  storage: include('Storage', required=False)
  additional_specifications: list(str(), required=False)
Complex_substance_of_chemical_origin_base:
  class: enum('Lipid assembly')
  preparation_protocol: list(include('Step'))
  storage: include('Storage', required=False)
  additional_specifications: list(str(), required=False)
Complex_substance_of_chemical_origin: choose(include('Complex_substance_of_chemical_origin_base'),
  type_field='class', Lipid_assembly=include('Lipid_assembly'))
Lipid_assembly:
  assembly_type: enum('Micelle', 'Liposome', 'Nanodisc', 'Sheet')
  components: list(nested_include('Assembly_component'))
  number_of_mono_layers: int(min=-1, required=False)
  size: include('Size', required=False)
Complex_substance_of_industrial_origin:
  product: enum('Beer', 'Cell medium', 'Whey')
  preparation_protocol: list(include('Step'))
  storage: include('Storage', required=False)
  additional_specifications: list(str(), required=False)
---
Depositors:
  depositor: include('Person')
  principal_contact: include('Person')
  contributors: list(nested_include('Person'), required=False)
Person:
  given_name: str()
  family_name: str()
  identifiers: list(person_id(), required=False)
  affiliations: list(vocabulary(vocabulary='affiliations', fields='[id, title, props.city,
    props.state, props.country]'), required=False)
Publication_base:
  pid: publication_id()
  title: str(required=False)
  type: enum('Article', 'Book', 'Thesis')
Publication: choose(include("Publication_base"), Article=include("Article"), Book=include("Book"),
  Thesis=include("Thesis") )
Article:
  journal: str()
Book:
  publisher: str()
Thesis:
  degree_type: enum("PhD", "Habilitation", "Master", "Bachelor")
---
Result_base:
  id: link_target(name="result")
  name: str()
  type: enum('Concentration', 'Stoichiometry', 'Constant of association KA', 'Constant
    of dissociation KD', 'Half maximal effective concentration EC50', 'Hill coefficient',
    'Association rate kOn', 'Dissociation rate kOff', 'Change in enthalpy deltaH',
    'Change in entropy deltaS', 'Change in Gibbs free energy deltaG', 'Molecular weight')
  entities_involved: list(nested_include('Entity_and_stoichiometry'), min=1)
  value: num()
  value_error: include('Value_error', required=False)
Result: choose(include('Result_base'), Concentration=include('Result_concentration'),
  Stoichiometry=include('Result_stoichiometry'), Constant_of_association_KA=include('Result_KA'),
  Constant_of_dissociation_KD=include('Result_KD'), Association_rate_kOn=include('Result_kOn'),
  Dissociation_rate_kOff=include('Result_kOff'), Change_in_enthalpy_deltaH=include('Result_deltaH'),
  Change_in_entropy_deltaS=include('Result_deltaS'), Change_in_Gibbs_free_energy_deltaG=include('Result_deltaG'),
  Molecular_weight=include('Result_MW'), Half_maximal_effective_concentration_EC50=include('Result_EC50'),
  Hill_coefficient=include('Result_hill_coeff'), )
Result_concentration:
  unit: include('CONCENTRATION_UNITS')
Result_stoichiometry:
  unit: enum('per complex')
Result_KA:
  unit: enum('M^-1', 'M^-2', 'mM^-1', 'mM^-2', 'µM^-1', 'µM^-2', 'nM^-1', 'nM^-2'
    )
Result_KD:
  unit: enum('M', 'M^2', 'mM', 'mM^2', 'µM', 'µM^2', 'nM', 'nM^2' )
Result_kOn:
  unit: enum('M^-1 s^-1', 'M^-2 s^-1', 'mM^-1 s^-1', 'mM^-2 s^-1', 'µM^-1 s^-1', 'µM^-2
    s^-1', 'nM^-1 s^-1', 'nM^-2 s^-1' )
Result_kOff:
  unit: enum('s^-1')
Result_deltaH:
  unit: include('ENERGY_UNITS')
Result_deltaS:
  unit: enum('kcal/molK','kJ/molK' )
Result_deltaG:
  unit: include('ENERGY_UNITS')
Result_MW:
  unit: include('MOLECULAR_WEIGHT_UNITS')
Result_EC50:
  unit: include('CONCENTRATION_UNITS')
Result_hill_coeff:
  unit: enum("unitless")
Entity_and_stoichiometry:
  entity: link(target='entity')
  copy_number: num(min=-1)
---
Modification:
  position: str(required=False)
  type: str()
  protocol: list(include('Step'), required=False)
Step:
  name: str()
  description: str()
Data_fitting:
  model: str()
  software_name: str(required=False)
  software_version: keyword(required=False)
  quality: num(required=False)
  quality_type: enum('R^2', 'SEM', 'red. Chi^2', '1sigma', '2sigma', '3sigma', '5sigma',
    'Skewness', required=False)
Processing_step:
  name: str()
  description: str()
  software_name: str(required=False)
  software_version: keyword(required=False)
  link_to_source_code: url(required=False)
---
Value_error:
  lower: num()
  upper: num()
  is_relative: bool()
Temperature:
  value: num()
  unit: include('TEMPERATURE_UNITS')
Pressure:
  value: num()
  value_error: include('Value_error', required=False)
  unit: include('PRESSURE_UNITS')
  obtained_by: include('OBTAINED_TYPES')
  is_controlled: bool()
Humidity:
  value: num()
  value_error: include('Value_error', required=False)
  unit: include('HUMIDITY_UNITS')
  obtained_by: include('OBTAINED_TYPES')
  is_controlled: bool()
Atmosphere:
  composition: list(nested_include('Chemical_constituent'), min=1)
Time_duration:
  value: num(min=0)
  unit: include('TIME_UNITS')
Concentration:
  value: num(min=-1)
  unit: include('CONCENTRATION_UNITS')
Molecular_weight:
  value: num(min=-1)
  unit: include('MOLECULAR_WEIGHT_UNITS')
Size:
  type: enum('radius', 'diameter', 'path length')
  mean: num(min=0)
  unit: include('LENGTH_UNITS')
  median: num(min=0, required=False)
  upper: num(required=False, min=0)
  lower: num(required=False, min=0)
Quality_controls:
  purity: include('Purity', required=False)
  identity: include('Identity', required=False)
  homogeneity: include("Homogeneity", required=False)
Purity_base:
  checked: enum("Yes", "No")
Purity: choose(include('Purity_base'), type_field='checked', Yes=include('Yes_purity'),
  No=include('Empty_object'))
Empty_object: {}
Yes_purity:
  method: enum("SDS-PAGE", "Capillary Electrophoresis", "Agarose Gel electrophoresis")
  purity_percentage: enum('<90 %', '>90 %', '>95 %', '>99 %')
Identity:
  checked: enum("Yes", "No")
  by_intact_mass: include('By_intact_mass', required=False)
  by_sequencing: include('By_sequencing', required=False)
  by_fingerprinting: include('By_fingerprinting', required=False)
By_intact_mass:
  method: enum("Mass spectrometry", "SDS-PAGE")
  deviation_from_expected_mass: include('Molecular_weight')
By_sequencing:
  method: enum("Mass spectrometry-Mass spectrometry", "Edman degradation", "Sanger
    sequencing", "Next generation sequencing")
  coverage: int(min=0, max=100)
By_fingerprinting:
  method: enum("Protease digest + Mass spectrometry", "Restriction enzyme digest +
    Gel electrophoresis")
Homogeneity_base:
  checked: enum("Yes", "No")
Homogeneity: choose(include('Homogeneity_base'), type_field='checked', Yes=include('Yes_homogeneity'),
  No=include('Empty_object'))
Yes_homogeneity:
  method: enum("Dynamic light scattering", "Size exclusion chromatography", "Native
    Gel Electrophoresis", "Mass photometry")
  expected number_of_species: int(min=1)
  number_of_species_observed: int(min=1)
---
Storage:
  temperature: include('Temperature')
  duration: include('Time_duration', required=False)
  storage_preparation: list(include('Step'), required=False)
Supplier:
  name: str()
  catalog_number: keyword(required=False)
  further_information: list(str(), required=False)
Coordinates:
  latitude: num(min=-90, max=90)
  longitude: num(min=-180, max=180)
---
CONCENTRATION_UNITS: enum('M', 'mM', 'µM', 'nM', 'pM', 'fM', 'aM', 'g/L', 'mg/mL',
  'µg/mL', 'ng/mL', 'mol/kg', 'mmol/kg', 'v/v %','w/w %', 'v/w %', 'w/v %', 'U/ml','%
  saturated', required=False)
FLOWRATE_UNITS: enum('mL/min','µl/s', required=False)
HUMIDITY_UNITS: enum('%','g/m^3','oz/y^3', required=False)
PRESSURE_UNITS: enum('Pa', 'kPa', 'MPa', 'Bar','mBar', 'atm', 'Torr', 'PSI', 'mmHg','inchHg',
  required=False)
TEMPERATURE_UNITS: enum('K', '°C', '°F')
TIME_UNITS: enum('nanoseconds','microseconds', 'milliseconds', 'seconds','minutes',
  'hours', 'days', 'months', 'years', required=False)
ENERGY_UNITS: enum('kcal/mol','kJ/mol', required=False)
POWER_UNITS: enum('µcal/s','µJ/s', required=False)
LENGTH_UNITS: enum('Å', 'nm', 'μm', 'mm', 'cm', 'm', required=False)
MOLECULAR_WEIGHT_UNITS: enum('g/mol', 'Da', 'kDa', 'MDa', required=False)
---
SUPPORTED_TECHNIQUES: enum('Bio-layer interferometry (BLI)', 'Microscale thermophoresis/Temperature
  related intensity change (MST/TRIC)', 'Surface plasmon resonance (SPR)', required=False)
COMPANIES: enum('Bio-Rad', 'Bruker', 'Cytiva', 'Gatorbio', 'GE Healthcare', 'Nanotemper',
  'Nicoya Life', 'Sartorius', 'Malvern Panalytical', 'Refeyn', 'TA Instruments', required=False)
